开发简易、模块化、扩展性好的通讯协议核心原胚（库）
采用 HTTP (S) 家族的长连接协议作为底层通讯方式，要求底层稳定，未来仅迭代高级层
协议格式：
发送内容：包含 "目标 IP / 目标端口 / 处理类型 / 次一级数据类型 / 数据内容 / 时间"（元素拆分，无固定顺序）
接收内容：包含 "对方 IP / 对方端口 / 处理类型 / 次一级数据类型 / 数据内容 / 时间"（元素拆分，无固定顺序）
技术栈：
后端：Python
前端：两种实现方式（HTML 浏览器网页 或 Python 程序）
重点是设计并实现清晰规范的接口，无需考虑用户直接使用，如果要使用必须得另外写py来调用（html_前端除外，显示发送写一个简单的来调试，打包）
接口设计需保证模块化和可扩展性


理想运行原理如下：

后端py库：单纯一个库
（查询ip）另外的py调用库的某个函数，返回本机ip
（启动）要启动服务器必须得另外写启动的py，由另外的py来调用这个同目录下的库的函数实现。启动时，由另外的启动.py来询问管理员开启哪个端口作为服务端口（输入后会校验，申请，开启这个端口），然后把端口传递给编好的库，库开始启动，直接使用这个端口（简单交接即可，不用校验，要是失败了会返回启动错误码）
（运行）会不断接收来自各个前端的消息并储存，具体存储方式如下
（接收）（会在本目录下data里面建一个存储文件来储存运行期间接收到的数据【那个协议标准数据（单纯几个参数，可以无序）】，另外的py每次调用这个函数，将会抽取里面的数据，随后删除，每次调用函数一次传递一条，直到为空返回无）（编写这个库时，在前面留一个变量1/0，对应存储在磁盘还是内存，方便我修改定义，注释清楚，默认存在内存中1，如果为0则存在磁盘）
（发送）另外的py调用库的函数时，会传入参数，写明要发送的ip和端口【参照标准协议】，发送完成即可，返回发送完成的参数
（结束）关闭端口，清理储存的缓存，结束运行

前端py库：参考后端服务器，其实py与py之间不分前后端，都是同等地位，只是方便叙述才分的前后服务端。除了html明确作为前端，py之间是同级平等关系，该走的协议功能相同

前端html：集成用户操作输入显示页面，直接单html运行，也要输入ip和端口，但是不必存储，直接显示出最近一条即可
另外的py：开始时调用库显示本机ip，询问管理员要开启哪个端口作为本程序通讯端口，输入后会校验，开启，再校验，如果失败要求重新更换，成功则调用库启动，循环等待时间接收库的消息，然后显示最近一条在屏幕上，刷新是自动的，哪怕不输入也会刷新。时刻保留一个输入，分别让用户输入【标准协议】的几个参数，输入后即发送，然后返回是否发送的消息（注意，库文件编写时，前后端要配合，如果接收成功了会给对方以【标准协议】发送成功消息，只不过占用一个“处理类型”，让这个处理类型为隐藏的，自动处理，不会显示给用户罢了，前后端任何交流都是遵循【标准协议】，只不过某些“处理类型”是占用隐藏的。虽然占用，但是也允许通过接口发送占用的“处理类型”，只不过不保证是否合规成功)。输入某几个字符则会停止服务。
交付要求：
代码注释清晰，保持基础功能，不添加额外功能
详细说明核心模块的调用方式、接口定义及使用方法，以便后续 AI 对话能理解和延续开发
总共需要写3个：py库（不分前后端），启动调用py（不分前后端），html（前端）